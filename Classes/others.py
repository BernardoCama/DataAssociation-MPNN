import os
import matplotlib.pyplot as plt
plt.rcParams['image.cmap'] = 'gray'
plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams.update({'font.size': 22})
from sklearn.metrics import confusion_matrix
import numpy as np
import seaborn as sns
import json


def create_exp_folder(cwd, number_vehicles = None, number_instants = None, NAME_EXPERIMENT = None, DIR_EXPERIMENT = None):
    if NAME_EXPERIMENT is None and DIR_EXPERIMENT is None:
        NAME_EXPERIMENT = f'/Results/normalloss_normalnet_vehicles{number_vehicles}_instants{number_instants}'
        DIR_EXPERIMENT = cwd + NAME_EXPERIMENT

    # Create folder of EXPERIMENT
    if not os.path.exists(DIR_EXPERIMENT):
        os.makedirs(DIR_EXPERIMENT)
    
    return DIR_EXPERIMENT


def compute_confusion_matrix(sample, output, DIR_EXPERIMENT):
    matrix = confusion_matrix(sample.edge_labels, output)
    # _, [TP, FP,  FN, TN] = fast_compute_class_metric(output, sample.edge_labels)
    TP = matrix[0][0]
    FP = matrix[0][1]
    FN = matrix[1][0]
    TN = matrix[1][1]
    print([TP, FP,  FN, TN])

    fig = plt.figure(figsize=(10,8))
    true = np.sum(matrix, axis = 1)
    predicted = np.sum(matrix, axis = 0)
    x_axis_labels=['Not Association\n\n\n{}'.format(predicted[0]),'Association\n\n\n{}'.format(predicted[1])]
    y_axis_labels=['{}\n\n\nNot Association'.format(true[0]),'{}\n\n\nAssociation'.format(true[1])]
    sns.heatmap(matrix, annot=True, fmt="d", xticklabels=x_axis_labels, yticklabels=y_axis_labels);
    plt.xlabel('Predicted');
    plt.ylabel('True');
    plt.savefig(DIR_EXPERIMENT + '/confusion_matrix.png', bbox_inches='tight')

    confusion_matrix_statistics = {}
    confusion_matrix_statistics['precision'] = TP/(TP+FP)
    confusion_matrix_statistics['recall/sensitivity'] = TP/(TP+FN)
    confusion_matrix_statistics['accuracy'] = (TP+TN)/(TP+FP+TN+FN)
    with open(DIR_EXPERIMENT + '/confusion_matrix_statistics.txt', 'w') as file:
         file.write(json.dumps(confusion_matrix_statistics))



















































































































































































































































































































































































































































































































































